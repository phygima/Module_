#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>

#define MAX_NUMBERS 100

int numbers[MAX_NUMBERS];
int num_count = 0;
int file_locked = 0;

void parent_signal_handler(int signum) {
    if (signum == SIGUSR1) {
        file_locked = 1;
        printf("Parent: File locked.\n");
    } else if (signum == SIGUSR2) {
        file_locked = 0;
        printf("Parent: File unlocked.\n");
    }
}

void child_signal_handler(int signum) {
    if (signum == SIGUSR1) {
        printf("Child: Parent is modifying file. Waiting...\n");
    }
}

void write_to_file() {
    FILE *file = fopen("numbers.txt", "w");
    if (file == NULL) {
        perror("Failed to open file");
        exit(EXIT_FAILURE);
    }
    for (int i = 0; i < num_count; i++) {
        fprintf(file, "%d\n", numbers[i]);
    }
    fclose(file);
}

void read_from_file() {
    FILE *file = fopen("numbers.txt", "r");
    if (file == NULL) {
        perror("Failed to open file");
        exit(EXIT_FAILURE);
    }
    while (fscanf(file, "%d", &numbers[num_count]) != EOF && num_count < MAX_NUMBERS) {
        num_count++;
    }
    fclose(file);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <number of integers>\n", argv[0]);
        return EXIT_FAILURE;
    }

    int num_integers = atoi(argv[1]);
    if (num_integers <= 0 || num_integers > MAX_NUMBERS) {
        fprintf(stderr, "Invalid number of integers\n");
        return EXIT_FAILURE;
    }

    pid_t pid;
    signal(SIGUSR1, parent_signal_handler);
    signal(SIGUSR2, parent_signal_handler);

    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        return EXIT_FAILURE;
    }

    if (pid == 0) {
        // Child process
        signal(SIGUSR1, child_signal_handler);

        while (1) {
            while (file_locked) {
                // Wait until file is unlocked
                usleep(10000); // 10 milliseconds
            }

            read_from_file();
            printf("Child: Read numbers from file:\n");
            for (int i = 0; i < num_count; i++) {
                printf("%d ", numbers[i]);
            }
            printf("\n");

            usleep(1000000); // 1 second
        }
    } else {
        // Parent process
        for (int i = 0; i < num_integers; i++) {
            // Generate random numbers
            numbers[i] = rand() % 1000;
        }
        write_to_file();
        printf("Parent: Generated and wrote numbers to file.\n");

        // Parent waits for child to send numbers
        while (1) {
            while (file_locked) {
                // Wait until file is unlocked
                usleep(10000); // 10 milliseconds
            }

            // Lock file before modifying
            kill(pid, SIGUSR1);

            // Modify file
            FILE *file = fopen("numbers.txt", "a");
            if (file == NULL) {
                perror("Failed to open file");
                return EXIT_FAILURE;
            }
            int random_number = rand() % 1000;
            fprintf(file, "%d\n", random_number);
            fclose(file);
            printf("Parent: Added number %d to file.\n", random_number);

            // Unlock file after modification
            kill(pid, SIGUSR2);

            usleep(1000000); // 1 second
        }
    }

    return EXIT_SUCCESS;
}
